// 리퀘스트 리스폰스 = 주소가 바뀔때마다 초기회된다
// 				(Redirect로 하면 주소창이 변경되면서 초기화)
//				(Forward로 하면 주소창이 고정되면서 유지)
// 세션 = 브라우저을 종료할때 초기회된다(Redirect와  Forward하고는 관계없다)
// 어플리케이션 = 서버를 종료할때 초기화된다


1. 프로젝트 실행 - 서버 스타트 (1단계)
web.xml
<welcome-file-list>
	<welcome-file>MemberLogin.me</welcome-file>
</welcome-file-list>
프로젝트가 실행되면 welcome-file에 의해 주소가 변경된다
http://localhost:8080/JSP_Ex02/
->
http://localhost:8080/JSP_Ex02/MemberLogin.me


2. 프로젝트 실행 - 서버 스타트 (2단계)
web.xml
<servlet>
	<servlet-name>MemberFrontController</servlet-name>
	<servlet-class>net.member.action.MemberFrontController</servlet-class>
</servlet>
<servlet-mapping>
	<servlet-name>MemberFrontController</servlet-name>
	<url-pattern>*.me</url-pattern>
</servlet-mapping>
주소가 .me로 끝나므로 맵핑에 의해 net.member.action.MemberFrontController 클래스가 실행된다
실행되면서 MemberLogin.me라는 파일은 없으므로 주소는
http://localhost:8080/JSP_Ex02/ 로 변경된다


3. 컨트롤러에서 로그인폼으로 이동 (1단계)]
MemberFrontController.java
protected void doGet(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
	doProcess(request, response);
}
서블릿파일이므로 디폴트인 doget메소드가 실행된다(request와 response를 파라미터로 전달받는다)
doget안의 doProcess메소드가 실행된다(request와 response를 파라미터로 전달받는다)


4. 컨트롤러에서 로그인폼으로 이동 (2단계)
MemberFrontController.java
if (command.equals("/")) {
	forward = new ActionForward();
	forward.setRedirect(false);
	forward.setPath("./member/loginForm.jsp");
}
주소값이 " http://localhost:8080/JSP_Ex02/ "이므로
command값은 "/"이다
if문에 의해 forward객체에
Redirect(리다이렉트)는 false(forward로 진행하겠다. 즉, 페이지만 바꾸고 주소와 세션은 그대로)
Path(경로[주소])는 "./member/loginForm.jsp"로 설정된다


5. 컨트롤러에서 로그인폼으로 이동 (3단계)
MemberFrontController.java
// 주소랑 페이지 바꿈 세션 초기화
if (forward.isRedirect()) {
	response.sendRedirect(forward.getPath());
} else {
// 페이지만 바꿈 세션 그대로
	RequestDispatcher dispatcher = request.getRequestDispatcher(forward.getPath());
	dispatcher.forward(request, response);
}
4번에서 리다이렉트는 false로 지정했으므로 forward형식으로 이동한다
dispatcher.forward(request, response); 를 호출 한 순간
4번에서 지정한 페이지로 바뀌고 주소와 세션은 그대로 남는다
또한 request, response를 파라미터로 넘김으로써 유지한다


6. 로그인폼에서 로그인하기
loginForm.jsp
<form name="loginform" action="./MemberLoginAction.me" method="post">
<a href="javascript:loginform.submit()">로그인</a>&nbsp;&nbsp;
로그인 버튼을 누르면 input에 입력된 아이디와 비밀번호가 request에 할당되어서
http://localhost:8080/JSP_Ex02/MemberLogin.me로 이동하게 된다
이동 후(
주소가 .me로 끝나므로 web.xml에서 MemberFrontController를 실행한다
서블릿 클래스이므로 자동으로 dopost가 실행되고(5번의 login.form에서 method를 "post"하였기때문)
dopost는

login.form.jsp request(아이디 비밀번호)와 response (./MemberLoginAction.me)
멤버컨트롤러
멤버컨트롤러 - dopost
멤버컨트롤러 - dopost - doProcess
멤버컨트롤러 - dopost - doProcess - MemberLoginAction.execute

MemberLoginAction.execute 내용
HttpSession session = request.getSession() ;(전달받은 리퀘스트에서 세션할당)
member.setMEMBER_ID(request.getParameter("MEMBER_ID")); (아이디와 비밀번호를 얻어 비교)
session.setAttribute("id", id); (일치하는 것이 있다면 로그인 성공이므로 세션이 아이디 저장)
forward.setRedirect(true); (다음 이동방식은 포워드가 아닌 리다이렉트로 지정)
forward.setPath("./MemberListAction.me"); (다음으로 이동할 주소 할당)
return forward; (포워드 리턴, 즉 멤버컨트롤로 전달)
끝나면 멤버컨트롤러로 복귀

